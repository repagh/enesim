Enesim
======
+ Rename every argb8888_unpre function enesim_argb in its own dir
+ Remove the enesim_backend_invalid
+ To implement a nine-patch renderer we need to implement the sub surface
  concept. For that we need to modify the pool interface given that a sub
  surface is backend dependent
+ Pass the surface when checking for bounds, this allows to know what renderer to use
  on the destination surface
+ Add a BOOL return on the bounds get
+ Use the decasteljau algo on the path normalizer
+ Split the path generator into their own functions/files
+ Make the threads work on windows
+ Remove the renderers on the stripes
+ Remove the warnings
+ We have a performance problem when some renderer has changed. Basically on the practice
  we end having a full tree of renderers, several levels, proxies, whatever. When we need
  to know what area to draw we basically iterate over all the tree. That means that we start
  from the topmost renderer and then going down, even if no children has actually changed
  we still need to call a function on each child to see if it has changed or not. In case
  of damages it is the same.

  So we need a way to inform somehow whenever a renderer has changed "upstream" to avoid
  iterating over all the children Here upstream refers that if a renderer is for example
  added on a compound renderer, when the children have a _set() function it should call a
  function in the form of:
  enesim_renderer_notify_change().
  This function should call a list of "listeners" of such
  "event" so for example the compund renderer can listen to that and again inform "upstream"
  of a change.
+ Add log levels on every subsystem/renderer
+ Make use of the flags on the surface draw function
+ We need to get rid of the hypot function, it is used on a lot places
  but with f16p16 values
+ We need to use the real types on the rendering functions
+ We need to simplify the real rendering functions into its own
  c file with its own struct, this way in the future we can reuse the
  algorithm for other backends
+ We need to use whenever possible functions for fixed point operations. This way later we can just
  create some #defines for them and we can easily change from 16.16 to 32.32 or stuff like that

Image
=====
+ Remove the mime parameter, we can autodetect it when loading

Text
====
+ Add a path-follow-span, i.e a text span that can receive
  a shape and use that as the path to follow. We need more
  code on enesim to know whenever a renderer is of a specific
  type, similar to what we are doing on eon
+ Add rich text element

